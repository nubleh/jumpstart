{"version":3,"sources":["506px-Jumpstart_Booster.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","imgPath","lands","Main","styled","div","ChoiceName","Card","Booster","appear","keyframes","Choices","Deck","App","data","decklist","useState","chosenPacks","setChosenPacks","choices","setChoices","choosePack","i","deck","reduce","carry","next","nextDeck","cards","map","card","matchingLand","find","land","shortName","toLowerCase","deckName","trim","onClick","drafted","length","Math","floor","random","candidate","indexOf","push","k","frontCard","name","key","style","animationDelay","src","boosterImg","url","href","rel","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53534641.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/506px-Jumpstart_Booster.a0c9a3d3.png\";","import React, { useState } from 'react';\n\nimport styled, { keyframes } from 'styled-components';\n\nimport decklist from './data/decklist.json';\nimport boosterImg from './506px-Jumpstart_Booster.png';\n\nconst imgPath = 'https://gatherer.wizards.com/Handlers/Image.ashx?type=card&name=';\nconst linkPath = 'https://gatherer.wizards.com/Pages/Search/Default.aspx?name=';\nconst lands = [\n  'Island',\n  'Plains',\n  'Mountain',\n  'Swamp',\n  'Forest',\n];\n\nfunction App() {\n  const { data } = decklist;\n\n  const [chosenPacks, setChosenPacks] = useState([] as number[]);\n\n  const [choices, setChoices] = useState([] as number[]);\n\n  const draft3Packs = () => {\n    const drafted = [];\n    while(drafted.length < 3) {\n      const i = Math.floor(Math.random() * data.length);\n      const candidate = data[i];\n      const chosenNames = drafted.map(i => data[i]).map(deck => deck.shortName);\n      if (\n        chosenNames.indexOf(candidate.shortName) === -1\n        && chosenPacks.indexOf(i) === -1\n        && choices.indexOf(i) === -1\n      ) {\n        drafted.push(i);\n      }\n    }\n    setChoices(drafted);\n  };\n\n  const choosePack = (i: number) => {\n    return () => {\n      setChoices([]);\n      setChosenPacks([...chosenPacks, i]);\n    };\n  };\n\n  const resetPacks = () => {\n    setChoices([]);\n    setChosenPacks([]);\n  };\n\n  const deck = chosenPacks.reduce((carry, next) => {\n    const nextDeck = data[next];\n    if (!nextDeck) {\n      return carry;\n    }\n    return [\n      ...nextDeck.cards.map(card => {\n        const matchingLand = lands.find(land => {\n          const variantName = `${nextDeck.shortName.toLowerCase()} ${land.toLowerCase()}`;\n          return variantName === card.toLowerCase();\n        });\n        if (matchingLand) {\n          return matchingLand;\n        }\n        return card;\n      }),\n      ...carry,\n    ];\n  }, [] as string[]);\n\n  const deckName = chosenPacks.reduce((carry, next) => {\n    const nextDeck = data[next];\n    if (!nextDeck) {\n      return carry;\n    }\n    if (carry === '') {\n      return nextDeck.shortName;\n    }\n    return carry.trim() + ' + ' + nextDeck.shortName;\n  }, '');\n\n  return (\n    <Main>\n      <button onClick={draft3Packs}>Reveal 3 Packs</button>\n      <button onClick={resetPacks}>Reset</button>\n      <Choices>\n        {choices.map((i, k) => {\n          const deck = data[i];\n          const frontCard = deck.cards.find(name => lands.indexOf(name) !== -1);\n          return <div\n            key={deck.name}\n            onClick={choosePack(i)}\n            style={{\n              animationDelay: `${k * 0.3}s`,\n            }}\n          >\n            <ChoiceName>\n              {deck.shortName}\n            </ChoiceName>\n            <Booster>\n              <img src={boosterImg}/>\n            </Booster>\n            <Card><img src={`${imgPath}${frontCard}`}/></Card>\n          </div>;\n        })}\n      </Choices>\n\n      {deck.length > 0 && <Deck>\n        <div>\n          {deckName} ({deck.length} cards)\n        </div>\n        {deck.map((card, i) => {\n          const url = card.indexOf('http') === -1 ? `${imgPath}${card}` : card;\n          return <a\n            href={`${linkPath}${card}`}\n            rel=\"noopener\"\n            target=\"_blank\"\n            key={`${card}-${i}`}\n          >\n            <Card>\n              <img src={url}/>\n            </Card>\n          </a>;\n        })}\n      </Deck>}\n    </Main>\n  );\n}\n\nconst Main = styled.div`\n  padding: 20px 40px;\n\n  button {\n    cursor: pointer;\n  }\n`;\n\nconst ChoiceName = styled.div`\n  background: rgba(0, 0, 0, 0.6);\n  display: inline-block;\n  padding: 4px 16px;\n  font-size: 12px;\n  border-radius: 100px;\n  position: absolute;\n  bottom: 22px;\n  left: 50%;\n  transform: translateX(-50%);\n  white-space: nowrap;\n  z-index: 2;\n`;\n\nconst Card = styled.div`\n  border-radius: 14px;\n  overflow: hidden;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n  position: relative;\n  width: 233px;\n  height: 310px;\n  transition: transform 0.1s;\n\n  > img {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst Booster = styled.div`\n  > img {\n    width: 200px;\n  }\n`;\n\nconst appear = keyframes`\n  0% {\n    transform: translateY(50px);\n    opacity: 0;\n  }\n  100% {\n    transform: none;\n    opacity: 1;\n  }\n`;\nconst Choices = styled.div`\n  padding-top: 40px;\n\n  ${Booster} {\n    position: relative;\n    z-index: 1;\n  }\n  ${Card} {\n    position: absolute;\n    z-index: 0;\n    top: -10px;\n    transform: translateX(-50%) scale(0.7);\n    left: 50%;\n    transform-origin: center top;\n  }\n\n  > div {\n    display: inline-block;\n    margin: 8px;\n    position: relative;\n    cursor: pointer;\n    transition: opacity 0.1s;\n    animation: ${appear} 1s 1;\n    animation-fill-mode: forwards;\n    transform: translateY(50px);\n    opacity: 0;\n\n    &:hover {\n      ${Card} {\n        transform: translateX(-50%) scale(0.7) translateY(-50px);\n      }\n    }\n  }\n`;\n\nconst Deck = styled.div`\n  margin: 40px 0;\n  ${Card} {\n    display: inline-block;\n\n    &:hover {\n      transform: scale(1.5);\n      z-index: 2;\n    }\n  }\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}